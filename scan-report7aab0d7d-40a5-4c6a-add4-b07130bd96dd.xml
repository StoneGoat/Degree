<ScanReport><OWASPZAPReport programName="ZAP" version="2.16.1" generated="Thu, 10 Apr 2025 10:35:21">
	
		<site name="http://vuln.stenaeke.org" host="vuln.stenaeke.org" port="80" ssl="false">
			<alerts>
				
					<alertitem>
						<pluginid>10202</pluginid>
						<alertRef>10202</alertRef>
						<alert>Absence of Anti-CSRF Tokens</alert>
						<name>Absence of Anti-CSRF Tokens</name>
						<riskcode>2</riskcode>
						<confidence>1</confidence>
						<riskdesc>Medium (Low)</riskdesc>
						<confidencedesc>Low</confidencedesc>
						<desc>&lt;p&gt;No Anti-CSRF tokens were found in a HTML submission form.&lt;/p&gt;&lt;p&gt;A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;CSRF attacks are effective in a number of situations, including:&lt;/p&gt;&lt;p&gt;    * The victim has an active session on the target site.&lt;/p&gt;&lt;p&gt;    * The victim is authenticated via HTTP auth on the target site.&lt;/p&gt;&lt;p&gt;    * The victim is on the same local network as the target site.&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;CSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy.&lt;/p&gt;</desc>
						<instances>
							
								<instance>
									<uri>http://vuln.stenaeke.org/login</uri>
									<method>GET</method>
									<param />
									<attack />
									<evidence>&lt;form action="/WebGoat/login" method='POST' style="width: 200px;"&gt;</evidence>
									<otherinfo>No known Anti-CSRF token [anticsrf, CSRFToken, __RequestVerificationToken, csrfmiddlewaretoken, authenticity_token, OWASP_CSRFTOKEN, anoncsrf, csrf_token, _csrf, _csrfSecret, __csrf_magic, CSRF, _token, _csrf_token, _csrfToken] was found in the following HTML form: [Form 1: "exampleInputEmail1" "exampleInputPassword1" ].</otherinfo>
								</instance>
							
							
								<instance>
									<uri>http://vuln.stenaeke.org/registration</uri>
									<method>GET</method>
									<param />
									<attack />
									<evidence>&lt;form class="form-horizontal" action="/WebGoat/register.mvc" method='POST'&gt;</evidence>
									<otherinfo>No known Anti-CSRF token [anticsrf, CSRFToken, __RequestVerificationToken, csrfmiddlewaretoken, authenticity_token, OWASP_CSRFTOKEN, anoncsrf, csrf_token, _csrf, _csrfSecret, __csrf_magic, CSRF, _token, _csrf_token, _csrfToken] was found in the following HTML form: [Form 1: "agree" "matchingPassword" "password" "username" ].</otherinfo>
								</instance>
							
						</instances>
						<count>2</count>
						<solution>&lt;p&gt;Phase: Architecture and Design&lt;/p&gt;&lt;p&gt;Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.&lt;/p&gt;&lt;p&gt;For example, use anti-CSRF packages such as the OWASP CSRFGuard.&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Phase: Implementation&lt;/p&gt;&lt;p&gt;Ensure that your application is free of cross-site scripting issues, because most CSRF defenses can be bypassed using attacker-controlled script.&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Phase: Architecture and Design&lt;/p&gt;&lt;p&gt;Generate a unique nonce for each form, place the nonce into the form, and verify the nonce upon receipt of the form. Be sure that the nonce is not predictable (CWE-330).&lt;/p&gt;&lt;p&gt;Note that this can be bypassed using XSS.&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Identify especially dangerous operations. When the user performs a dangerous operation, send a separate confirmation request to ensure that the user intended to perform that operation.&lt;/p&gt;&lt;p&gt;Note that this can be bypassed using XSS.&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Use the ESAPI Session Management control.&lt;/p&gt;&lt;p&gt;This control includes a component for CSRF.&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Do not use the GET method for any request that triggers a state change.&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Phase: Implementation&lt;/p&gt;&lt;p&gt;Check the HTTP Referer header to see if the request originated from an expected page. This could break legitimate functionality, because users or proxies may have disabled sending the Referer for privacy reasons.&lt;/p&gt;</solution>
						<otherinfo>&lt;p&gt;No known Anti-CSRF token [anticsrf, CSRFToken, __RequestVerificationToken, csrfmiddlewaretoken, authenticity_token, OWASP_CSRFTOKEN, anoncsrf, csrf_token, _csrf, _csrfSecret, __csrf_magic, CSRF, _token, _csrf_token, _csrfToken] was found in the following HTML form: [Form 1: "exampleInputEmail1" "exampleInputPassword1" ].&lt;/p&gt;</otherinfo>
						<reference>&lt;p&gt;https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html&lt;/p&gt;&lt;p&gt;https://cwe.mitre.org/data/definitions/352.html&lt;/p&gt;</reference>
						<cweid>352</cweid>
						<wascid>9</wascid>
						<sourceid>9</sourceid>
					</alertitem>
				
				
					<alertitem>
						<pluginid>10038</pluginid>
						<alertRef>10038-1</alertRef>
						<alert>Content Security Policy (CSP) Header Not Set</alert>
						<name>Content Security Policy (CSP) Header Not Set</name>
						<riskcode>2</riskcode>
						<confidence>3</confidence>
						<riskdesc>Medium (High)</riskdesc>
						<confidencedesc>High</confidencedesc>
						<desc>&lt;p&gt;Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page â€” covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.&lt;/p&gt;</desc>
						<instances>
							
								<instance>
									<uri>http://vuln.stenaeke.org/login</uri>
									<method>GET</method>
									<param />
									<attack />
									<evidence />
									<otherinfo />
								</instance>
							
							
								<instance>
									<uri>http://vuln.stenaeke.org/registration</uri>
									<method>GET</method>
									<param />
									<attack />
									<evidence />
									<otherinfo />
								</instance>
							
						</instances>
						<count>2</count>
						<solution>&lt;p&gt;Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header.&lt;/p&gt;</solution>
						<otherinfo />
						<reference>&lt;p&gt;https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy&lt;/p&gt;&lt;p&gt;https://cheatsheetseries.owasp.org/cheatsheets/Content_Security_Policy_Cheat_Sheet.html&lt;/p&gt;&lt;p&gt;https://www.w3.org/TR/CSP/&lt;/p&gt;&lt;p&gt;https://w3c.github.io/webappsec-csp/&lt;/p&gt;&lt;p&gt;https://web.dev/articles/csp&lt;/p&gt;&lt;p&gt;https://caniuse.com/#feat=contentsecuritypolicy&lt;/p&gt;&lt;p&gt;https://content-security-policy.com/&lt;/p&gt;</reference>
						<cweid>693</cweid>
						<wascid>15</wascid>
						<sourceid>9</sourceid>
					</alertitem>
				
				
					<alertitem>
						<pluginid>10020</pluginid>
						<alertRef>10020-1</alertRef>
						<alert>Missing Anti-clickjacking Header</alert>
						<name>Missing Anti-clickjacking Header</name>
						<riskcode>2</riskcode>
						<confidence>2</confidence>
						<riskdesc>Medium (Medium)</riskdesc>
						<confidencedesc>Medium</confidencedesc>
						<desc>&lt;p&gt;The response does not protect against 'ClickJacking' attacks. It should include either Content-Security-Policy with 'frame-ancestors' directive or X-Frame-Options.&lt;/p&gt;</desc>
						<instances>
							
								<instance>
									<uri>http://vuln.stenaeke.org/login</uri>
									<method>GET</method>
									<param>x-frame-options</param>
									<attack />
									<evidence />
									<otherinfo />
								</instance>
							
						</instances>
						<count>1</count>
						<solution>&lt;p&gt;Modern Web browsers support the Content-Security-Policy and X-Frame-Options HTTP headers. Ensure one of them is set on all web pages returned by your site/app.&lt;/p&gt;&lt;p&gt;If you expect the page to be framed only by pages on your server (e.g. it's part of a FRAMESET) then you'll want to use SAMEORIGIN, otherwise if you never expect the page to be framed, you should use DENY. Alternatively consider implementing Content Security Policy's "frame-ancestors" directive.&lt;/p&gt;</solution>
						<otherinfo />
						<reference>&lt;p&gt;https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options&lt;/p&gt;</reference>
						<cweid>1021</cweid>
						<wascid>15</wascid>
						<sourceid>9</sourceid>
					</alertitem>
				
				
					<alertitem>
						<pluginid>10054</pluginid>
						<alertRef>10054-1</alertRef>
						<alert>Cookie without SameSite Attribute</alert>
						<name>Cookie without SameSite Attribute</name>
						<riskcode>1</riskcode>
						<confidence>2</confidence>
						<riskdesc>Low (Medium)</riskdesc>
						<confidencedesc>Medium</confidencedesc>
						<desc>&lt;p&gt;A cookie has been set without the SameSite attribute, which means that the cookie can be sent as a result of a 'cross-site' request. The SameSite attribute is an effective counter measure to cross-site request forgery, cross-site script inclusion, and timing attacks.&lt;/p&gt;</desc>
						<instances>
							
								<instance>
									<uri>http://vuln.stenaeke.org/start.mvc</uri>
									<method>GET</method>
									<param>JSESSIONID</param>
									<attack />
									<evidence>Set-Cookie: JSESSIONID</evidence>
									<otherinfo />
								</instance>
							
						</instances>
						<count>1</count>
						<solution>&lt;p&gt;Ensure that the SameSite attribute is set to either 'lax' or ideally 'strict' for all cookies.&lt;/p&gt;</solution>
						<otherinfo />
						<reference>&lt;p&gt;https://tools.ietf.org/html/draft-ietf-httpbis-cookie-same-site&lt;/p&gt;</reference>
						<cweid>1275</cweid>
						<wascid>13</wascid>
						<sourceid>27</sourceid>
					</alertitem>
				
				
					<alertitem>
						<pluginid>10021</pluginid>
						<alertRef>10021</alertRef>
						<alert>X-Content-Type-Options Header Missing</alert>
						<name>X-Content-Type-Options Header Missing</name>
						<riskcode>1</riskcode>
						<confidence>2</confidence>
						<riskdesc>Low (Medium)</riskdesc>
						<confidencedesc>Medium</confidencedesc>
						<desc>&lt;p&gt;The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.&lt;/p&gt;</desc>
						<instances>
							
								<instance>
									<uri>http://vuln.stenaeke.org/css/animate.css</uri>
									<method>GET</method>
									<param>x-content-type-options</param>
									<attack />
									<evidence />
									<otherinfo>This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.
At "High" threshold this scan rule will not alert on client or server error responses.</otherinfo>
								</instance>
							
							
								<instance>
									<uri>http://vuln.stenaeke.org/css/font-awesome.min.css</uri>
									<method>GET</method>
									<param>x-content-type-options</param>
									<attack />
									<evidence />
									<otherinfo>This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.
At "High" threshold this scan rule will not alert on client or server error responses.</otherinfo>
								</instance>
							
							
								<instance>
									<uri>http://vuln.stenaeke.org/css/img/favicon.ico</uri>
									<method>GET</method>
									<param>x-content-type-options</param>
									<attack />
									<evidence />
									<otherinfo>This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.
At "High" threshold this scan rule will not alert on client or server error responses.</otherinfo>
								</instance>
							
							
								<instance>
									<uri>http://vuln.stenaeke.org/css/main.css</uri>
									<method>GET</method>
									<param>x-content-type-options</param>
									<attack />
									<evidence />
									<otherinfo>This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.
At "High" threshold this scan rule will not alert on client or server error responses.</otherinfo>
								</instance>
							
							
								<instance>
									<uri>http://vuln.stenaeke.org/login</uri>
									<method>GET</method>
									<param>x-content-type-options</param>
									<attack />
									<evidence />
									<otherinfo>This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.
At "High" threshold this scan rule will not alert on client or server error responses.</otherinfo>
								</instance>
							
							
								<instance>
									<uri>http://vuln.stenaeke.org/plugins/bootstrap/css/bootstrap.min.css</uri>
									<method>GET</method>
									<param>x-content-type-options</param>
									<attack />
									<evidence />
									<otherinfo>This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.
At "High" threshold this scan rule will not alert on client or server error responses.</otherinfo>
								</instance>
							
							
								<instance>
									<uri>http://vuln.stenaeke.org/registration</uri>
									<method>GET</method>
									<param>x-content-type-options</param>
									<attack />
									<evidence />
									<otherinfo>This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.
At "High" threshold this scan rule will not alert on client or server error responses.</otherinfo>
								</instance>
							
						</instances>
						<count>7</count>
						<solution>&lt;p&gt;Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.&lt;/p&gt;&lt;p&gt;If possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.&lt;/p&gt;</solution>
						<otherinfo>&lt;p&gt;This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.&lt;/p&gt;&lt;p&gt;At "High" threshold this scan rule will not alert on client or server error responses.&lt;/p&gt;</otherinfo>
						<reference>&lt;p&gt;https://learn.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/compatibility/gg622941(v=vs.85)&lt;/p&gt;&lt;p&gt;https://owasp.org/www-community/Security_Headers&lt;/p&gt;</reference>
						<cweid>693</cweid>
						<wascid>15</wascid>
						<sourceid>29</sourceid>
					</alertitem>
				
				
					<alertitem>
						<pluginid>10111</pluginid>
						<alertRef>10111</alertRef>
						<alert>Authentication Request Identified</alert>
						<name>Authentication Request Identified</name>
						<riskcode>0</riskcode>
						<confidence>3</confidence>
						<riskdesc>Informational (High)</riskdesc>
						<confidencedesc>High</confidencedesc>
						<desc>&lt;p&gt;The given request has been identified as an authentication request. The 'Other Info' field contains a set of key=value lines which identify any relevant fields. If the request is in a context which has an Authentication Method set to "Auto-Detect" then this rule will change the authentication to match the request identified.&lt;/p&gt;</desc>
						<instances>
							
								<instance>
									<uri>http://vuln.stenaeke.org/WebGoat/login</uri>
									<method>POST</method>
									<param>username</param>
									<attack />
									<evidence>password</evidence>
									<otherinfo>userParam=username
userValue=ZAP
passwordParam=password
referer=http://vuln.stenaeke.org/login</otherinfo>
								</instance>
							
						</instances>
						<count>1</count>
						<solution>&lt;p&gt;This is an informational alert rather than a vulnerability and so there is nothing to fix.&lt;/p&gt;</solution>
						<otherinfo>&lt;p&gt;userParam=username&lt;/p&gt;&lt;p&gt;userValue=ZAP&lt;/p&gt;&lt;p&gt;passwordParam=password&lt;/p&gt;&lt;p&gt;referer=http://vuln.stenaeke.org/login&lt;/p&gt;</otherinfo>
						<reference>&lt;p&gt;https://www.zaproxy.org/docs/desktop/addons/authentication-helper/auth-req-id/&lt;/p&gt;</reference>
						<cweid>-1</cweid>
						<wascid>-1</wascid>
						<sourceid>32</sourceid>
					</alertitem>
				
				
					<alertitem>
						<pluginid>10050</pluginid>
						<alertRef>10050-2</alertRef>
						<alert>Retrieved from Cache</alert>
						<name>Retrieved from Cache</name>
						<riskcode>0</riskcode>
						<confidence>2</confidence>
						<riskdesc>Informational (Medium)</riskdesc>
						<confidencedesc>Medium</confidencedesc>
						<desc>&lt;p&gt;The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as "proxy" caches are configured on the local network. This configuration is typically found in corporate or educational environments, for instance.&lt;/p&gt;</desc>
						<instances>
							
								<instance>
									<uri>http://vuln.stenaeke.org/css/font-awesome.min.css</uri>
									<method>GET</method>
									<param />
									<attack />
									<evidence>Age: 293</evidence>
									<otherinfo>The presence of the 'Age' header indicates that a HTTP/1.1 compliant caching server is in use.</otherinfo>
								</instance>
							
							
								<instance>
									<uri>http://vuln.stenaeke.org/plugins/bootstrap/css/bootstrap.min.css</uri>
									<method>GET</method>
									<param />
									<attack />
									<evidence>Age: 293</evidence>
									<otherinfo>The presence of the 'Age' header indicates that a HTTP/1.1 compliant caching server is in use.</otherinfo>
								</instance>
							
						</instances>
						<count>2</count>
						<solution>&lt;p&gt;Validate that the response does not contain sensitive, personal or user-specific information. If it does, consider the use of the following HTTP response headers, to limit, or prevent the content being stored and retrieved from the cache by another user:&lt;/p&gt;&lt;p&gt;Cache-Control: no-cache, no-store, must-revalidate, private&lt;/p&gt;&lt;p&gt;Pragma: no-cache&lt;/p&gt;&lt;p&gt;Expires: 0&lt;/p&gt;&lt;p&gt;This configuration directs both HTTP 1.0 and HTTP 1.1 compliant caching servers to not store the response, and to not retrieve the response (without validation) from the cache, in response to a similar request.&lt;/p&gt;</solution>
						<otherinfo>&lt;p&gt;The presence of the 'Age' header indicates that a HTTP/1.1 compliant caching server is in use.&lt;/p&gt;</otherinfo>
						<reference>&lt;p&gt;https://tools.ietf.org/html/rfc7234&lt;/p&gt;&lt;p&gt;https://tools.ietf.org/html/rfc7231&lt;/p&gt;&lt;p&gt;https://www.rfc-editor.org/rfc/rfc9110.html&lt;/p&gt;</reference>
						<cweid>-1</cweid>
						<wascid>-1</wascid>
						<sourceid>19</sourceid>
					</alertitem>
				
				
					<alertitem>
						<pluginid>10112</pluginid>
						<alertRef>10112</alertRef>
						<alert>Session Management Response Identified</alert>
						<name>Session Management Response Identified</name>
						<riskcode>0</riskcode>
						<confidence>2</confidence>
						<riskdesc>Informational (Medium)</riskdesc>
						<confidencedesc>Medium</confidencedesc>
						<desc>&lt;p&gt;The given response has been identified as containing a session management token. The 'Other Info' field contains a set of header tokens that can be used in the Header Based Session Management Method. If the request is in a context which has a Session Management Method set to "Auto-Detect" then this rule will change the session management to use the tokens identified.&lt;/p&gt;</desc>
						<instances>
							
								<instance>
									<uri>http://vuln.stenaeke.org/start.mvc</uri>
									<method>GET</method>
									<param>JSESSIONID</param>
									<attack />
									<evidence>4AB544AF82B9110D13D3D8B1725D6834</evidence>
									<otherinfo>
cookie:JSESSIONID</otherinfo>
								</instance>
							
							
								<instance>
									<uri>http://vuln.stenaeke.org/start.mvc</uri>
									<method>POST</method>
									<param>JSESSIONID</param>
									<attack />
									<evidence>4AB544AF82B9110D13D3D8B1725D6834</evidence>
									<otherinfo>
cookie:JSESSIONID</otherinfo>
								</instance>
							
						</instances>
						<count>2</count>
						<solution>&lt;p&gt;This is an informational alert rather than a vulnerability and so there is nothing to fix.&lt;/p&gt;</solution>
						<otherinfo>&lt;p&gt;&lt;/p&gt;&lt;p&gt;cookie:JSESSIONID&lt;/p&gt;</otherinfo>
						<reference>&lt;p&gt;https://www.zaproxy.org/docs/desktop/addons/authentication-helper/session-mgmt-id&lt;/p&gt;</reference>
						<cweid>-1</cweid>
						<wascid>-1</wascid>
						<sourceid>27</sourceid>
					</alertitem>
				
				
					<alertitem>
						<pluginid>10104</pluginid>
						<alertRef>10104</alertRef>
						<alert>User Agent Fuzzer</alert>
						<name>User Agent Fuzzer</name>
						<riskcode>0</riskcode>
						<confidence>2</confidence>
						<riskdesc>Informational (Medium)</riskdesc>
						<confidencedesc>Medium</confidencedesc>
						<desc>&lt;p&gt;Check for differences in response based on fuzzed User Agent (eg. mobile sites, access as a Search Engine Crawler). Compares the response statuscode and the hashcode of the response body with the original response.&lt;/p&gt;</desc>
						<instances>
							
								<instance>
									<uri>http://vuln.stenaeke.org/WebGoat/login</uri>
									<method>POST</method>
									<param>Header User-Agent</param>
									<attack>Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1)</attack>
									<evidence />
									<otherinfo />
								</instance>
							
							
								<instance>
									<uri>http://vuln.stenaeke.org/WebGoat/login</uri>
									<method>POST</method>
									<param>Header User-Agent</param>
									<attack>Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.0)</attack>
									<evidence />
									<otherinfo />
								</instance>
							
							
								<instance>
									<uri>http://vuln.stenaeke.org/WebGoat/login</uri>
									<method>POST</method>
									<param>Header User-Agent</param>
									<attack>Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1)</attack>
									<evidence />
									<otherinfo />
								</instance>
							
							
								<instance>
									<uri>http://vuln.stenaeke.org/WebGoat/login</uri>
									<method>POST</method>
									<param>Header User-Agent</param>
									<attack>Mozilla/5.0 (Windows NT 10.0; Trident/7.0; rv:11.0) like Gecko</attack>
									<evidence />
									<otherinfo />
								</instance>
							
							
								<instance>
									<uri>http://vuln.stenaeke.org/WebGoat/login</uri>
									<method>POST</method>
									<param>Header User-Agent</param>
									<attack>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3739.0 Safari/537.36 Edg/75.0.109.0</attack>
									<evidence />
									<otherinfo />
								</instance>
							
							
								<instance>
									<uri>http://vuln.stenaeke.org/WebGoat/login</uri>
									<method>POST</method>
									<param>Header User-Agent</param>
									<attack>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36</attack>
									<evidence />
									<otherinfo />
								</instance>
							
							
								<instance>
									<uri>http://vuln.stenaeke.org/WebGoat/login</uri>
									<method>POST</method>
									<param>Header User-Agent</param>
									<attack>Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:93.0) Gecko/20100101 Firefox/91.0</attack>
									<evidence />
									<otherinfo />
								</instance>
							
							
								<instance>
									<uri>http://vuln.stenaeke.org/WebGoat/login</uri>
									<method>POST</method>
									<param>Header User-Agent</param>
									<attack>Mozilla/5.0 (compatible; Googlebot/2.1; +http://www.google.com/bot.html)</attack>
									<evidence />
									<otherinfo />
								</instance>
							
							
								<instance>
									<uri>http://vuln.stenaeke.org/WebGoat/login</uri>
									<method>POST</method>
									<param>Header User-Agent</param>
									<attack>Mozilla/5.0 (compatible; Yahoo! Slurp; http://help.yahoo.com/help/us/ysearch/slurp)</attack>
									<evidence />
									<otherinfo />
								</instance>
							
							
								<instance>
									<uri>http://vuln.stenaeke.org/WebGoat/login</uri>
									<method>POST</method>
									<param>Header User-Agent</param>
									<attack>Mozilla/5.0 (iPhone; CPU iPhone OS 8_0_2 like Mac OS X) AppleWebKit/600.1.4 (KHTML, like Gecko) Version/8.0 Mobile/12A366 Safari/600.1.4</attack>
									<evidence />
									<otherinfo />
								</instance>
							
							
								<instance>
									<uri>http://vuln.stenaeke.org/WebGoat/login</uri>
									<method>POST</method>
									<param>Header User-Agent</param>
									<attack>Mozilla/5.0 (iPhone; U; CPU iPhone OS 3_0 like Mac OS X; en-us) AppleWebKit/528.18 (KHTML, like Gecko) Version/4.0 Mobile/7A341 Safari/528.16</attack>
									<evidence />
									<otherinfo />
								</instance>
							
							
								<instance>
									<uri>http://vuln.stenaeke.org/WebGoat/login</uri>
									<method>POST</method>
									<param>Header User-Agent</param>
									<attack>msnbot/1.1 (+http://search.msn.com/msnbot.htm)</attack>
									<evidence />
									<otherinfo />
								</instance>
							
						</instances>
						<count>12</count>
						<solution />
						<otherinfo />
						<reference>&lt;p&gt;https://owasp.org/wstg&lt;/p&gt;</reference>
						<cweid>0</cweid>
						<wascid>0</wascid>
						<sourceid>580</sourceid>
					</alertitem>
				
			</alerts>
		</site>
	
	
		<site name="https://vuln.stenaeke.org" host="vuln.stenaeke.org" port="443" ssl="true">
			<alerts>
				
					<alertitem>
						<pluginid>10011</pluginid>
						<alertRef>10011</alertRef>
						<alert>Cookie Without Secure Flag</alert>
						<name>Cookie Without Secure Flag</name>
						<riskcode>1</riskcode>
						<confidence>2</confidence>
						<riskdesc>Low (Medium)</riskdesc>
						<confidencedesc>Medium</confidencedesc>
						<desc>&lt;p&gt;A cookie has been set without the secure flag, which means that the cookie can be accessed via unencrypted connections.&lt;/p&gt;</desc>
						<instances>
							
								<instance>
									<uri>https://vuln.stenaeke.org</uri>
									<method>GET</method>
									<param>JSESSIONID</param>
									<attack />
									<evidence>Set-Cookie: JSESSIONID</evidence>
									<otherinfo />
								</instance>
							
							
								<instance>
									<uri>https://vuln.stenaeke.org/robots.txt</uri>
									<method>GET</method>
									<param>JSESSIONID</param>
									<attack />
									<evidence>Set-Cookie: JSESSIONID</evidence>
									<otherinfo />
								</instance>
							
							
								<instance>
									<uri>https://vuln.stenaeke.org/sitemap.xml</uri>
									<method>GET</method>
									<param>JSESSIONID</param>
									<attack />
									<evidence>Set-Cookie: JSESSIONID</evidence>
									<otherinfo />
								</instance>
							
						</instances>
						<count>3</count>
						<solution>&lt;p&gt;Whenever a cookie contains sensitive information or is a session token, then it should always be passed using an encrypted channel. Ensure that the secure flag is set for cookies containing such sensitive information.&lt;/p&gt;</solution>
						<otherinfo />
						<reference>&lt;p&gt;https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes.html&lt;/p&gt;</reference>
						<cweid>614</cweid>
						<wascid>13</wascid>
						<sourceid>8</sourceid>
					</alertitem>
				
				
					<alertitem>
						<pluginid>10054</pluginid>
						<alertRef>10054-1</alertRef>
						<alert>Cookie without SameSite Attribute</alert>
						<name>Cookie without SameSite Attribute</name>
						<riskcode>1</riskcode>
						<confidence>2</confidence>
						<riskdesc>Low (Medium)</riskdesc>
						<confidencedesc>Medium</confidencedesc>
						<desc>&lt;p&gt;A cookie has been set without the SameSite attribute, which means that the cookie can be sent as a result of a 'cross-site' request. The SameSite attribute is an effective counter measure to cross-site request forgery, cross-site script inclusion, and timing attacks.&lt;/p&gt;</desc>
						<instances>
							
								<instance>
									<uri>https://vuln.stenaeke.org</uri>
									<method>GET</method>
									<param>JSESSIONID</param>
									<attack />
									<evidence>Set-Cookie: JSESSIONID</evidence>
									<otherinfo />
								</instance>
							
							
								<instance>
									<uri>https://vuln.stenaeke.org/robots.txt</uri>
									<method>GET</method>
									<param>JSESSIONID</param>
									<attack />
									<evidence>Set-Cookie: JSESSIONID</evidence>
									<otherinfo />
								</instance>
							
							
								<instance>
									<uri>https://vuln.stenaeke.org/sitemap.xml</uri>
									<method>GET</method>
									<param>JSESSIONID</param>
									<attack />
									<evidence>Set-Cookie: JSESSIONID</evidence>
									<otherinfo />
								</instance>
							
						</instances>
						<count>3</count>
						<solution>&lt;p&gt;Ensure that the SameSite attribute is set to either 'lax' or ideally 'strict' for all cookies.&lt;/p&gt;</solution>
						<otherinfo />
						<reference>&lt;p&gt;https://tools.ietf.org/html/draft-ietf-httpbis-cookie-same-site&lt;/p&gt;</reference>
						<cweid>1275</cweid>
						<wascid>13</wascid>
						<sourceid>8</sourceid>
					</alertitem>
				
				
					<alertitem>
						<pluginid>10035</pluginid>
						<alertRef>10035-1</alertRef>
						<alert>Strict-Transport-Security Header Not Set</alert>
						<name>Strict-Transport-Security Header Not Set</name>
						<riskcode>1</riskcode>
						<confidence>3</confidence>
						<riskdesc>Low (High)</riskdesc>
						<confidencedesc>High</confidencedesc>
						<desc>&lt;p&gt;HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.&lt;/p&gt;</desc>
						<instances>
							
								<instance>
									<uri>https://vuln.stenaeke.org</uri>
									<method>GET</method>
									<param />
									<attack />
									<evidence />
									<otherinfo />
								</instance>
							
							
								<instance>
									<uri>https://vuln.stenaeke.org/robots.txt</uri>
									<method>GET</method>
									<param />
									<attack />
									<evidence />
									<otherinfo />
								</instance>
							
							
								<instance>
									<uri>https://vuln.stenaeke.org/sitemap.xml</uri>
									<method>GET</method>
									<param />
									<attack />
									<evidence />
									<otherinfo />
								</instance>
							
						</instances>
						<count>3</count>
						<solution>&lt;p&gt;Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.&lt;/p&gt;</solution>
						<otherinfo />
						<reference>&lt;p&gt;https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Strict_Transport_Security_Cheat_Sheet.html&lt;/p&gt;&lt;p&gt;https://owasp.org/www-community/Security_Headers&lt;/p&gt;&lt;p&gt;https://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security&lt;/p&gt;&lt;p&gt;https://caniuse.com/stricttransportsecurity&lt;/p&gt;&lt;p&gt;https://datatracker.ietf.org/doc/html/rfc6797&lt;/p&gt;</reference>
						<cweid>319</cweid>
						<wascid>15</wascid>
						<sourceid>8</sourceid>
					</alertitem>
				
				
					<alertitem>
						<pluginid>10112</pluginid>
						<alertRef>10112</alertRef>
						<alert>Session Management Response Identified</alert>
						<name>Session Management Response Identified</name>
						<riskcode>0</riskcode>
						<confidence>2</confidence>
						<riskdesc>Informational (Medium)</riskdesc>
						<confidencedesc>Medium</confidencedesc>
						<desc>&lt;p&gt;The given response has been identified as containing a session management token. The 'Other Info' field contains a set of header tokens that can be used in the Header Based Session Management Method. If the request is in a context which has a Session Management Method set to "Auto-Detect" then this rule will change the session management to use the tokens identified.&lt;/p&gt;</desc>
						<instances>
							
								<instance>
									<uri>https://vuln.stenaeke.org</uri>
									<method>GET</method>
									<param>JSESSIONID</param>
									<attack />
									<evidence>778F3AC53774B49D6A282543B0280B0B</evidence>
									<otherinfo>
cookie:JSESSIONID</otherinfo>
								</instance>
							
							
								<instance>
									<uri>https://vuln.stenaeke.org/robots.txt</uri>
									<method>GET</method>
									<param>JSESSIONID</param>
									<attack />
									<evidence>B9F0C05B1DE709E85C418BA04B7CD2C4</evidence>
									<otherinfo>
cookie:JSESSIONID</otherinfo>
								</instance>
							
							
								<instance>
									<uri>https://vuln.stenaeke.org/sitemap.xml</uri>
									<method>GET</method>
									<param>JSESSIONID</param>
									<attack />
									<evidence>C43A22AB4603AD31E4E88126332CF6B0</evidence>
									<otherinfo>
cookie:JSESSIONID</otherinfo>
								</instance>
							
							
								<instance>
									<uri>https://vuln.stenaeke.org</uri>
									<method>POST</method>
									<param>JSESSIONID</param>
									<attack />
									<evidence>778F3AC53774B49D6A282543B0280B0B</evidence>
									<otherinfo>
cookie:JSESSIONID</otherinfo>
								</instance>
							
						</instances>
						<count>4</count>
						<solution>&lt;p&gt;This is an informational alert rather than a vulnerability and so there is nothing to fix.&lt;/p&gt;</solution>
						<otherinfo>&lt;p&gt;&lt;/p&gt;&lt;p&gt;cookie:JSESSIONID&lt;/p&gt;</otherinfo>
						<reference>&lt;p&gt;https://www.zaproxy.org/docs/desktop/addons/authentication-helper/session-mgmt-id&lt;/p&gt;</reference>
						<cweid>-1</cweid>
						<wascid>-1</wascid>
						<sourceid>8</sourceid>
					</alertitem>
				
				
					<alertitem>
						<pluginid>10104</pluginid>
						<alertRef>10104</alertRef>
						<alert>User Agent Fuzzer</alert>
						<name>User Agent Fuzzer</name>
						<riskcode>0</riskcode>
						<confidence>2</confidence>
						<riskdesc>Informational (Medium)</riskdesc>
						<confidencedesc>Medium</confidencedesc>
						<desc>&lt;p&gt;Check for differences in response based on fuzzed User Agent (eg. mobile sites, access as a Search Engine Crawler). Compares the response statuscode and the hashcode of the response body with the original response.&lt;/p&gt;</desc>
						<instances>
							
								<instance>
									<uri>https://vuln.stenaeke.org/robots.txt</uri>
									<method>GET</method>
									<param>Header User-Agent</param>
									<attack>Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1)</attack>
									<evidence />
									<otherinfo />
								</instance>
							
							
								<instance>
									<uri>https://vuln.stenaeke.org/robots.txt</uri>
									<method>GET</method>
									<param>Header User-Agent</param>
									<attack>Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.0)</attack>
									<evidence />
									<otherinfo />
								</instance>
							
							
								<instance>
									<uri>https://vuln.stenaeke.org/robots.txt</uri>
									<method>GET</method>
									<param>Header User-Agent</param>
									<attack>Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1)</attack>
									<evidence />
									<otherinfo />
								</instance>
							
							
								<instance>
									<uri>https://vuln.stenaeke.org/robots.txt</uri>
									<method>GET</method>
									<param>Header User-Agent</param>
									<attack>Mozilla/5.0 (Windows NT 10.0; Trident/7.0; rv:11.0) like Gecko</attack>
									<evidence />
									<otherinfo />
								</instance>
							
							
								<instance>
									<uri>https://vuln.stenaeke.org/robots.txt</uri>
									<method>GET</method>
									<param>Header User-Agent</param>
									<attack>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3739.0 Safari/537.36 Edg/75.0.109.0</attack>
									<evidence />
									<otherinfo />
								</instance>
							
							
								<instance>
									<uri>https://vuln.stenaeke.org/robots.txt</uri>
									<method>GET</method>
									<param>Header User-Agent</param>
									<attack>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36</attack>
									<evidence />
									<otherinfo />
								</instance>
							
							
								<instance>
									<uri>https://vuln.stenaeke.org/robots.txt</uri>
									<method>GET</method>
									<param>Header User-Agent</param>
									<attack>Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:93.0) Gecko/20100101 Firefox/91.0</attack>
									<evidence />
									<otherinfo />
								</instance>
							
							
								<instance>
									<uri>https://vuln.stenaeke.org/robots.txt</uri>
									<method>GET</method>
									<param>Header User-Agent</param>
									<attack>Mozilla/5.0 (compatible; Googlebot/2.1; +http://www.google.com/bot.html)</attack>
									<evidence />
									<otherinfo />
								</instance>
							
							
								<instance>
									<uri>https://vuln.stenaeke.org/robots.txt</uri>
									<method>GET</method>
									<param>Header User-Agent</param>
									<attack>Mozilla/5.0 (compatible; Yahoo! Slurp; http://help.yahoo.com/help/us/ysearch/slurp)</attack>
									<evidence />
									<otherinfo />
								</instance>
							
							
								<instance>
									<uri>https://vuln.stenaeke.org/robots.txt</uri>
									<method>GET</method>
									<param>Header User-Agent</param>
									<attack>Mozilla/5.0 (iPhone; CPU iPhone OS 8_0_2 like Mac OS X) AppleWebKit/600.1.4 (KHTML, like Gecko) Version/8.0 Mobile/12A366 Safari/600.1.4</attack>
									<evidence />
									<otherinfo />
								</instance>
							
							
								<instance>
									<uri>https://vuln.stenaeke.org/robots.txt</uri>
									<method>GET</method>
									<param>Header User-Agent</param>
									<attack>Mozilla/5.0 (iPhone; U; CPU iPhone OS 3_0 like Mac OS X; en-us) AppleWebKit/528.18 (KHTML, like Gecko) Version/4.0 Mobile/7A341 Safari/528.16</attack>
									<evidence />
									<otherinfo />
								</instance>
							
							
								<instance>
									<uri>https://vuln.stenaeke.org/robots.txt</uri>
									<method>GET</method>
									<param>Header User-Agent</param>
									<attack>msnbot/1.1 (+http://search.msn.com/msnbot.htm)</attack>
									<evidence />
									<otherinfo />
								</instance>
							
							
								<instance>
									<uri>https://vuln.stenaeke.org/sitemap.xml</uri>
									<method>GET</method>
									<param>Header User-Agent</param>
									<attack>Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1)</attack>
									<evidence />
									<otherinfo />
								</instance>
							
							
								<instance>
									<uri>https://vuln.stenaeke.org/sitemap.xml</uri>
									<method>GET</method>
									<param>Header User-Agent</param>
									<attack>Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.0)</attack>
									<evidence />
									<otherinfo />
								</instance>
							
							
								<instance>
									<uri>https://vuln.stenaeke.org/sitemap.xml</uri>
									<method>GET</method>
									<param>Header User-Agent</param>
									<attack>Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1)</attack>
									<evidence />
									<otherinfo />
								</instance>
							
							
								<instance>
									<uri>https://vuln.stenaeke.org/sitemap.xml</uri>
									<method>GET</method>
									<param>Header User-Agent</param>
									<attack>Mozilla/5.0 (Windows NT 10.0; Trident/7.0; rv:11.0) like Gecko</attack>
									<evidence />
									<otherinfo />
								</instance>
							
							
								<instance>
									<uri>https://vuln.stenaeke.org/sitemap.xml</uri>
									<method>GET</method>
									<param>Header User-Agent</param>
									<attack>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3739.0 Safari/537.36 Edg/75.0.109.0</attack>
									<evidence />
									<otherinfo />
								</instance>
							
							
								<instance>
									<uri>https://vuln.stenaeke.org/sitemap.xml</uri>
									<method>GET</method>
									<param>Header User-Agent</param>
									<attack>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36</attack>
									<evidence />
									<otherinfo />
								</instance>
							
							
								<instance>
									<uri>https://vuln.stenaeke.org/sitemap.xml</uri>
									<method>GET</method>
									<param>Header User-Agent</param>
									<attack>Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:93.0) Gecko/20100101 Firefox/91.0</attack>
									<evidence />
									<otherinfo />
								</instance>
							
							
								<instance>
									<uri>https://vuln.stenaeke.org/sitemap.xml</uri>
									<method>GET</method>
									<param>Header User-Agent</param>
									<attack>Mozilla/5.0 (compatible; Googlebot/2.1; +http://www.google.com/bot.html)</attack>
									<evidence />
									<otherinfo />
								</instance>
							
							
								<instance>
									<uri>https://vuln.stenaeke.org/sitemap.xml</uri>
									<method>GET</method>
									<param>Header User-Agent</param>
									<attack>Mozilla/5.0 (compatible; Yahoo! Slurp; http://help.yahoo.com/help/us/ysearch/slurp)</attack>
									<evidence />
									<otherinfo />
								</instance>
							
							
								<instance>
									<uri>https://vuln.stenaeke.org/sitemap.xml</uri>
									<method>GET</method>
									<param>Header User-Agent</param>
									<attack>Mozilla/5.0 (iPhone; CPU iPhone OS 8_0_2 like Mac OS X) AppleWebKit/600.1.4 (KHTML, like Gecko) Version/8.0 Mobile/12A366 Safari/600.1.4</attack>
									<evidence />
									<otherinfo />
								</instance>
							
							
								<instance>
									<uri>https://vuln.stenaeke.org/sitemap.xml</uri>
									<method>GET</method>
									<param>Header User-Agent</param>
									<attack>Mozilla/5.0 (iPhone; U; CPU iPhone OS 3_0 like Mac OS X; en-us) AppleWebKit/528.18 (KHTML, like Gecko) Version/4.0 Mobile/7A341 Safari/528.16</attack>
									<evidence />
									<otherinfo />
								</instance>
							
							
								<instance>
									<uri>https://vuln.stenaeke.org/sitemap.xml</uri>
									<method>GET</method>
									<param>Header User-Agent</param>
									<attack>msnbot/1.1 (+http://search.msn.com/msnbot.htm)</attack>
									<evidence />
									<otherinfo />
								</instance>
							
						</instances>
						<count>24</count>
						<solution />
						<otherinfo />
						<reference>&lt;p&gt;https://owasp.org/wstg&lt;/p&gt;</reference>
						<cweid>0</cweid>
						<wascid>0</wascid>
						<sourceid>578</sourceid>
					</alertitem>
				
			</alerts>
		</site>
	
</OWASPZAPReport><NmapScanResults>
    <tag_188_114_96_1>
        <tag_188_114_96_1>
            <hostnames>
                <name />
                <type />
            </hostnames>
            <addresses>
                <ipv4>188.114.96.1</ipv4>
            </addresses>
            <status>
                <state>up</state>
                <reason>user-set</reason>
            </status>
            <open_ports>
                <tag_80>
                    <state>open</state>
                    <reason>syn-ack</reason>
                    <name>http</name>
                    <product />
                    <version />
                    <extrainfo />
                    <conf>3</conf>
                    <cpe />
                </tag_80>
                <tag_443>
                    <state>open</state>
                    <reason>syn-ack</reason>
                    <name>https</name>
                    <product />
                    <version />
                    <extrainfo />
                    <conf>3</conf>
                    <cpe />
                </tag_443>
                <tag_8080>
                    <state>open</state>
                    <reason>syn-ack</reason>
                    <name>http-proxy</name>
                    <product />
                    <version />
                    <extrainfo />
                    <conf>3</conf>
                    <cpe />
                </tag_8080>
                <tag_8443>
                    <state>open</state>
                    <reason>syn-ack</reason>
                    <name>https-alt</name>
                    <product />
                    <version />
                    <extrainfo />
                    <conf>3</conf>
                    <cpe />
                </tag_8443>
            </open_ports>
        </tag_188_114_96_1>
    </tag_188_114_96_1>
    <tag_188_114_97_1>
        <tag_188_114_97_1>
            <hostnames>
                <name />
                <type />
            </hostnames>
            <addresses>
                <ipv4>188.114.97.1</ipv4>
            </addresses>
            <status>
                <state>up</state>
                <reason>user-set</reason>
            </status>
            <open_ports>
                <tag_80>
                    <state>open</state>
                    <reason>syn-ack</reason>
                    <name>http</name>
                    <product />
                    <version />
                    <extrainfo />
                    <conf>3</conf>
                    <cpe />
                </tag_80>
                <tag_443>
                    <state>open</state>
                    <reason>syn-ack</reason>
                    <name>https</name>
                    <product />
                    <version />
                    <extrainfo />
                    <conf>3</conf>
                    <cpe />
                </tag_443>
                <tag_8080>
                    <state>open</state>
                    <reason>syn-ack</reason>
                    <name>http-proxy</name>
                    <product />
                    <version />
                    <extrainfo />
                    <conf>3</conf>
                    <cpe />
                </tag_8080>
                <tag_8443>
                    <state>open</state>
                    <reason>syn-ack</reason>
                    <name>https-alt</name>
                    <product />
                    <version />
                    <extrainfo />
                    <conf>3</conf>
                    <cpe />
                </tag_8443>
            </open_ports>
        </tag_188_114_97_1>
    </tag_188_114_97_1>
</NmapScanResults><NiktoScanResults>
    <raw_output>- Nikto v2.1.5
---------------------------------------------------------------------------
+ Target IP:          188.114.96.1
+ Target Hostname:    vuln.stenaeke.org
+ Target Port:        80
+ Start Time:         2025-04-10 10:30:53 (GMT2)
---------------------------------------------------------------------------
+ Server: cloudflare
+ Uncommon header 'referrer-policy' found, with contents: same-origin
+ Uncommon header 'cf-ray' found, with contents: 92e0e28c6f256de7-CPH
+ Uncommon header 'alt-svc' found, with contents: h3=":443"; ma=86400
+ Uncommon header 'nel' found, with contents: {"success_fraction":0,"report_to":"cf-nel","max_age":604800}
+ Uncommon header 'x-frame-options' found, with contents: SAMEORIGIN
+ Uncommon header 'report-to' found, with contents: {"endpoints":[{"url":"https:\/\/a.nel.cloudflare.com\/report\/v4?s=GE%2F9yTWQ1zHmFRMeSswzSWGD30wf0fQ71BjOpXfw%2BL7dXxJ9TsLdRQZolYFOc7qaL1M6iEyT1Wsr6mvCy9O3wMAMIaEsdqcG8gBDjWjUMZdj1B4ZayYg4Im7V0JtyGPEaHcI5Q%3D%3D"}],"group":"cf-nel","max_age":604800}
+ Uncommon header 'server-timing' found, with contents: cfL4;desc="?proto=TCP&amp;rtt=13552&amp;min_rtt=13367&amp;rtt_var=3923&amp;sent=3&amp;recv=7&amp;lost=0&amp;retrans=0&amp;sent_bytes=1955&amp;recv_bytes=420&amp;delivery_rate=108326&amp;cwnd=251&amp;unsent_bytes=0&amp;cid=0000000000000000&amp;ts=0&amp;x=0"
+ No CGI Directories found (use '-C all' to force check all possible dirs)
+ 6544 items checked: 0 error(s) and 7 item(s) reported on remote host
+ End Time:           2025-04-10 10:34:07 (GMT2) (194 seconds)
---------------------------------------------------------------------------
+ 1 host(s) tested
</raw_output>
</NiktoScanResults></ScanReport>